version = "0.0.2-SNAPSHOT"

buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
        querydslVersion = '4.1.3'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.RELEASE"
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-cloud-connectors')
    compile('org.springframework.cloud:spring-cloud-starter-security')
    compile('org.springframework.cloud:spring-cloud-starter')
    compile('org.springframework.cloud:spring-cloud-task-starter')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile "com.querydsl:querydsl-apt:$querydslVersion:jpa"
    compile "com.querydsl:querydsl-jpa:$querydslVersion"
    compile('com.h2database:h2')
    compile('io.jsonwebtoken:jjwt:0.7.0')
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    // https://mvnrepository.com/artifact/com.squareup.jnagmp/jnagmp
    compile group: 'com.squareup.jnagmp', name: 'jnagmp', version: '2.0.0'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-spring')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('cglib:cglib:2.2')
}

ext['spock.version'] = '1.1-groovy-2.4-rc-2'

mainClassName = 'ch.ge.ve.protopoc.ProtocolPocApplication'

jar {
    baseName = 'chvote-protocol-poc'
    version = project.version
}

task createSimulationScripts(type: CreateStartScripts) {
    outputDir = file('build/simulation')
    mainClassName = 'ch.ge.ve.protopoc.service.simulation.Simulation'
    applicationName = 'chvote-protocol-simulation'
    classpath = files(jar.archiveName)
    classpath += project.configurations.runtime
}

task simulation(type:JavaExec, dependsOn: classes, group: 'simulation') {
    def mySecLevel = System.getProperty('secLevel', '1')
    def myElectionType = System.getProperty('electionType', 'SIMPLE_SAMPLE')
    def myVotersCount = System.getProperty('votersCount', '100')

    main = 'ch.ge.ve.protopoc.service.simulation.Simulation'
    classpath = sourceSets.main.runtimeClasspath
    args = ["$mySecLevel", "$myElectionType", "$myVotersCount"]

    println "using args: $args"
}

distributions {
    main {
        baseName = 'chvote-protocol-poc'
    }

    simulation {
        baseName = 'chvote-protocol-simulation'
        contents {
            into('lib') {
                from jar
                from(project.configurations.runtime)
            }
            into('bin') {
                from createSimulationScripts
            }
        }
    }
}