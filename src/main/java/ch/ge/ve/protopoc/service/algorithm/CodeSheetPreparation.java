package ch.ge.ve.protopoc.service.algorithm;

import ch.ge.ve.protopoc.service.model.*;
import ch.ge.ve.protopoc.service.support.ByteArrayUtils;
import ch.ge.ve.protopoc.service.support.Conversion;
import com.google.common.base.Preconditions;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Algorithms related to the preparation of code sheets
 */
public class CodeSheetPreparation {
    private final Conversion conversion = new Conversion();
    private final PublicParameters publicParameters;
    private final int s;

    public CodeSheetPreparation(PublicParameters publicParameters) {
        this.publicParameters = publicParameters;
        s = publicParameters.getS();
    }

    /**
     * Algorithm 5.16: GetSheets
     *
     * @param electionSet   the electionSet definition, including v, c, n, k and E
     * @param codeSheetData the secret voter data generated by each authority for each voter
     *                      (codeSheetData.get(j) = bold_d_j : the list of the voters' secret data for authority j)
     * @return all the relevant information combined for printing on the code sheets
     */
    public List<CodeSheet> getSheets(ElectionSet electionSet, List<List<SecretVoterData>> codeSheetData) {
        Preconditions.checkArgument(codeSheetData.size() == electionSet.getVoters().size(),
                String.format("|D| [%d] != |v| [%d]", codeSheetData.size(), electionSet.getVoters().size()));
        Preconditions.checkArgument(codeSheetData.stream().allMatch(d_i -> d_i.size() == s));

        List<CodeSheet> codeSheets = new ArrayList<>();
        for (int i = 0; i < electionSet.getVoters().size(); i++) {
            Voter v_i = electionSet.getVoters().get(i);

            // for each authority, get the secret data pertaining to voter i
            final int local_i = i;
            List<SecretVoterData> secretVoterDataList = codeSheetData.stream()
                    .map(list -> list.get(local_i)).collect(Collectors.toList());

            byte[] X_i = computeX_i(secretVoterDataList);
            byte[] Y_i = computeY_i(secretVoterDataList);
            byte[] F_i = computeF_i(secretVoterDataList);
            byte[][] rc_i = computeRC_i(electionSet, secretVoterDataList);
            List<Integer> k_i = computeK_i(electionSet, v_i);

            codeSheets.add(getSheet(electionSet, v_i, X_i, Y_i, F_i, rc_i, k_i));
        }
        return codeSheets;
    }

    /**
     * X_i = ToByteArray( \sum{j=1,s}(x_{ij}), L_x)
     *
     * @param secretVoterDataList the secret voter data generated by each of the authorities for this voter
     * @return the byte array conversion of the sum of individual <tt>x_ij</tt>s
     */
    private byte[] computeX_i(List<SecretVoterData> secretVoterDataList) {
        BigInteger sum_x_ij = IntStream.range(0, s).mapToObj(secretVoterDataList::get)
                .map(SecretVoterData::getX)
                .reduce(BigInteger::add).orElseGet(() -> BigInteger.ZERO);
        return conversion.toByteArray(sum_x_ij, publicParameters.getL_x() / 8);
    }

    /**
     * Y_i = ToByteArray( \sum{j=1,s}(y_{ij}), L_y)
     *
     * @param secretVoterDataList the secret voter data generated by each of the authorities for this voter
     * @return the byte array conversion of the sum of individual <tt>y_ij</tt>s
     */
    private byte[] computeY_i(List<SecretVoterData> secretVoterDataList) {
        BigInteger sum_y_ij = IntStream.range(0, s).mapToObj(secretVoterDataList::get)
                .map(SecretVoterData::getY)
                .reduce(BigInteger::add).orElseGet(() -> BigInteger.ZERO);
        return conversion.toByteArray(sum_y_ij, publicParameters.getL_y() / 8);
    }

    /**
     * F_i = \xor{j=1,s}(F_{ij})
     *
     * @param secretVoterDataList the secret voter data generated by each of the authorities for this voter
     * @return the result of xoring the individual <tt>F_ij</tt>s
     */
    private byte[] computeF_i(List<SecretVoterData> secretVoterDataList) {
        return IntStream.range(0, s).mapToObj(secretVoterDataList::get)
                .map(SecretVoterData::getF)
                .reduce(ByteArrayUtils::xor).orElseGet(() -> new byte[publicParameters.getL_f() / 8]);
    }

    /**
     * RC_ik = \xor{j=1,s}(RC_{ijk})
     *
     * @param secretVoterDataList the secret voter data generated by each of the authorities for this voter
     * @return for each k, the result of xoring the individual <tt>RC_ijk</tt>s
     */
    private byte[][] computeRC_i(ElectionSet electionSet, List<SecretVoterData> secretVoterDataList) {
        byte[][] rc_i = new byte[electionSet.getCandidates().size()][];
        IntStream.range(0, electionSet.getCandidates().size()).mapToObj(k ->
                IntStream.range(0, s).mapToObj(secretVoterDataList::get)
                        .map(secretVoterData -> secretVoterData.getRc()[k])
                        .reduce(ByteArrayUtils::xor).orElseGet(() -> new byte[publicParameters.getL_r() / 8])
        ).collect(Collectors.toList()).toArray(rc_i);
        return rc_i;
    }

    /**
     * k_i = (e_{i,1} * k_1, ..., e_{i,t} * kt)
     *
     * @param electionSet the electionSet definition, including v, c, n, k and E
     * @param v_i         the individual voter
     * @return the vector of allowed number of selections per election for the voter
     */
    private List<Integer> computeK_i(ElectionSet electionSet, Voter v_i) {
        return electionSet.getElections().stream()
                .map(e -> electionSet.isEligible(v_i, e) ? e.getNumberOfSelections() : 0)
                .collect(Collectors.toList());
    }

    /**
     * Algorithm 5.17: GetSheet
     *
     * @param electionSet the electionSet definition, including v, c, n, k and E
     * @param v_i         the voter
     * @param x_i         the element to be used for identification
     * @param y_i         the element to be used for confirmation
     * @param f_i         the element to be used as finalization code
     * @param rc_i        the vector of the elements to be used for return codes
     * @param k_i         the number of selections the voter can make for each election
     * @return the elements needed for the voter's code sheet
     */
    private CodeSheet getSheet(ElectionSet electionSet, Voter v_i, byte[] x_i, byte[] y_i, byte[] f_i, byte[][] rc_i, List<Integer> k_i) {
        return new CodeSheet(v_i, electionSet, k_i, x_i, y_i, f_i, rc_i);
    }
}
